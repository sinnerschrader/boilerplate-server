'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = loadHooks;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _requireAll = require('require-all');

var _requireAll2 = _interopRequireDefault(_requireAll);

var _default = require('./default');

var _default2 = _interopRequireDefault(_default);

function loadHooks(application, path) {
	var modules = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	var hooks = (0, _requireAll2['default'])(path);

	hooks = Object.keys(hooks).map(function (name) {
		return Object.assign(hooks[name].index ? hooks[name].index : hooks[name], { name: name });
	}).map(function (hook) {
		return Object.assign(hook, { 'requirePath': (0, _path.resolve)(path, hook.name) });
	});

	if (modules && application.configuration) {
		var moduleHookNames = Object.keys(application.configuration.hooks.enabled).filter(function (key) {
			return typeof application.configuration.hooks.enabled[key] === 'string';
		});

		var moduleHooks = moduleHookNames.map(function requireHookModules(moduleHookName) {
			var moduleName = application.configuration.hooks.enabled[moduleHookName];

			try {
				var moduleHook = require(moduleName);
				moduleHook.name = moduleHookName;
				moduleHook.requirePath = require.resolve(moduleName);
				application.log.debug('[application:hooks]', 'Required module hook \'' + moduleHookName + '\' from module \'' + moduleName + '\'');
			} catch (err) {
				application.log.warn('[application:hooks]', 'Could not require module hook \'' + moduleHookName + '\' from module \'' + moduleName + '\'');
			}
		});

		hooks = hooks.concat(moduleHooks);
	}

	hooks = hooks.filter(function (hook) {
		return hook;
	}).map(function hookCallback(hook) {
		return (0, _default2['default'])(application, hook.name, hook);
	});

	return hooks;
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9saWJyYXJ5L2hvb2tzL2xvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7cUJBS3dCLFNBQVM7Ozs7b0JBTFQsTUFBTTs7MEJBRVAsYUFBYTs7Ozt1QkFDWixXQUFXOzs7O0FBRXBCLFNBQVMsU0FBUyxDQUFHLFdBQVcsRUFBRSxJQUFJLEVBQW9CO0tBQWxCLE9BQU8seURBQUcsS0FBSzs7QUFDckUsS0FBSSxLQUFLLEdBQUcsNkJBQVksSUFBSSxDQUFFLENBQUM7O0FBRS9CLE1BQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUN4QixHQUFHLENBQUMsVUFBQyxJQUFJO1NBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxDQUFDO0VBQUEsQ0FBQyxDQUMzRixHQUFHLENBQUMsVUFBQyxJQUFJO1NBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxhQUFhLEVBQUUsVUFWN0MsT0FBTyxFQVU4QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7RUFBQSxDQUFDLENBQUM7O0FBRWxGLEtBQUssT0FBTyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUc7QUFDM0MsTUFBSSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBRSxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUUsQ0FDMUUsTUFBTSxDQUFFLFVBQUUsR0FBRztVQUFNLE9BQU8sV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxLQUFLLFFBQVE7R0FBQSxDQUFFLENBQUM7O0FBRTFGLE1BQUksV0FBVyxHQUFHLGVBQWUsQ0FDL0IsR0FBRyxDQUFFLFNBQVMsa0JBQWtCLENBQUcsY0FBYyxFQUFHO0FBQ3BELE9BQUksVUFBVSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxjQUFjLENBQUUsQ0FBQzs7QUFFM0UsT0FBSTtBQUNILFFBQUksVUFBVSxHQUFHLE9BQU8sQ0FBRSxVQUFVLENBQUUsQ0FBQztBQUN2QyxjQUFVLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztBQUNqQyxjQUFVLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsZUFBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUUscUJBQXFCLDhCQUEyQixjQUFjLHlCQUFrQixVQUFVLFFBQUssQ0FBQztJQUN2SCxDQUFDLE9BQU8sR0FBRyxFQUFFO0FBQ2IsZUFBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUscUJBQXFCLHVDQUFvQyxjQUFjLHlCQUFrQixVQUFVLFFBQUssQ0FBQztJQUMvSDtHQUNELENBQUMsQ0FBQzs7QUFFSixPQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztFQUNsQzs7QUFFRCxNQUFLLEdBQUcsS0FBSyxDQUNYLE1BQU0sQ0FBQyxVQUFDLElBQUk7U0FBSyxJQUFJO0VBQUEsQ0FBQyxDQUN0QixHQUFHLENBQUMsU0FBUyxZQUFZLENBQUUsSUFBSSxFQUFFO0FBQ2pDLFNBQU8sMEJBQVksV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDOztBQUVKLFFBQU8sS0FBSyxDQUFDO0NBQ2IiLCJmaWxlIjoibG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgcmVxdWlyZUFsbCBmcm9tICdyZXF1aXJlLWFsbCc7XG5pbXBvcnQgaG9va0ZhY3RvcnkgZnJvbSAnLi9kZWZhdWx0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZEhvb2tzICggYXBwbGljYXRpb24sIHBhdGgsIG1vZHVsZXMgPSBmYWxzZSApIHtcblx0bGV0IGhvb2tzID0gcmVxdWlyZUFsbCggcGF0aCApO1xuXG5cdGhvb2tzID0gT2JqZWN0LmtleXMoaG9va3MpXG5cdFx0Lm1hcCgobmFtZSkgPT4gT2JqZWN0LmFzc2lnbihob29rc1tuYW1lXS5pbmRleCA/IGhvb2tzW25hbWVdLmluZGV4IDogaG9va3NbbmFtZV0sIHsgbmFtZSB9KSlcblx0XHQubWFwKChob29rKSA9PiBPYmplY3QuYXNzaWduKGhvb2ssIHsgJ3JlcXVpcmVQYXRoJzogcmVzb2x2ZShwYXRoLCBob29rLm5hbWUpIH0pKTtcblxuXHRpZiAoIG1vZHVsZXMgJiYgYXBwbGljYXRpb24uY29uZmlndXJhdGlvbiApIHtcblx0XHRsZXQgbW9kdWxlSG9va05hbWVzID0gT2JqZWN0LmtleXMoIGFwcGxpY2F0aW9uLmNvbmZpZ3VyYXRpb24uaG9va3MuZW5hYmxlZCApXG5cdFx0XHQuZmlsdGVyKCAoIGtleSApID0+IHR5cGVvZiBhcHBsaWNhdGlvbi5jb25maWd1cmF0aW9uLmhvb2tzLmVuYWJsZWRbIGtleSBdID09PSAnc3RyaW5nJyApO1xuXG5cdFx0bGV0IG1vZHVsZUhvb2tzID0gbW9kdWxlSG9va05hbWVzXG5cdFx0XHQubWFwKCBmdW5jdGlvbiByZXF1aXJlSG9va01vZHVsZXMgKCBtb2R1bGVIb29rTmFtZSApIHtcblx0XHRcdFx0bGV0IG1vZHVsZU5hbWUgPSBhcHBsaWNhdGlvbi5jb25maWd1cmF0aW9uLmhvb2tzLmVuYWJsZWRbIG1vZHVsZUhvb2tOYW1lIF07XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRsZXQgbW9kdWxlSG9vayA9IHJlcXVpcmUoIG1vZHVsZU5hbWUgKTtcblx0XHRcdFx0XHRtb2R1bGVIb29rLm5hbWUgPSBtb2R1bGVIb29rTmFtZTtcblx0XHRcdFx0XHRtb2R1bGVIb29rLnJlcXVpcmVQYXRoID0gcmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUpO1xuXHRcdFx0XHRcdGFwcGxpY2F0aW9uLmxvZy5kZWJ1ZyggJ1thcHBsaWNhdGlvbjpob29rc10nLCBgUmVxdWlyZWQgbW9kdWxlIGhvb2sgJyR7bW9kdWxlSG9va05hbWV9JyBmcm9tIG1vZHVsZSAnJHttb2R1bGVOYW1lfSdgICk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGFwcGxpY2F0aW9uLmxvZy53YXJuKCAnW2FwcGxpY2F0aW9uOmhvb2tzXScsIGBDb3VsZCBub3QgcmVxdWlyZSBtb2R1bGUgaG9vayAnJHttb2R1bGVIb29rTmFtZX0nIGZyb20gbW9kdWxlICcke21vZHVsZU5hbWV9J2AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRob29rcyA9IGhvb2tzLmNvbmNhdChtb2R1bGVIb29rcyk7XG5cdH1cblxuXHRob29rcyA9IGhvb2tzXG5cdFx0LmZpbHRlcigoaG9vaykgPT4gaG9vaylcblx0XHQubWFwKGZ1bmN0aW9uIGhvb2tDYWxsYmFjayAoaG9vaykge1xuXHRcdFx0cmV0dXJuIGhvb2tGYWN0b3J5KGFwcGxpY2F0aW9uLCBob29rLm5hbWUsIGhvb2spO1xuXHRcdH0pO1xuXG5cdHJldHVybiBob29rcztcbn1cbiJdfQ==