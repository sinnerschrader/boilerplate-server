'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = loadHooks;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _path = require('path');

var _requireAll = require('require-all');

var _requireAll2 = _interopRequireDefault(_requireAll);

var _default = require('./default');

var _default2 = _interopRequireDefault(_default);

function loadHooks(application, path) {
	var modules = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	var hooks = (0, _requireAll2['default'])(path);

	hooks = Object.keys(hooks).map(function (name) {
		return Object.assign(hooks[name].index ? hooks[name].index : hooks[name], { name: name });
	}).map(function (hook) {
		return Object.assign(hook, { 'requirePath': (0, _path.resolve)(path, hook.name) });
	});

	if (modules && application.configuration) {
		var moduleHookNames = Object.keys(application.configuration.hooks.enabled).filter(function (key) {
			return typeof application.configuration.hooks.enabled[key] === 'string';
		});

		var moduleHooks = moduleHookNames.map(function requireHookModules(moduleHookName) {
			var moduleName = application.configuration.hooks.enabled[moduleHookName];

			try {
				var moduleHook = require(moduleName);
				moduleHook.name = moduleHookName;
				moduleHook.requirePath = require.resolve(moduleName);
				application.log.debug('[application:hooks]', 'Required module hook \'' + moduleHookName + '\' from module \'' + moduleName + '\'');
			} catch (err) {
				application.log.warn('[application:hooks]', 'Could not require module hook \'' + moduleHookName + '\' from module \'' + moduleName + '\'');
			}
		});

		hooks = hooks.concat(moduleHooks);
	}

	hooks = hooks.filter(function (hook) {
		return hook;
	}).map(function hookCallback(hook) {
		return (0, _default2['default'])(application, hook.name, hook);
	});

	return hooks;
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9saWJyYXJ5L2hvb2tzL2xvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7cUJBS3dCLFNBQVM7Ozs7b0JBTFQsTUFBTTs7MEJBRVAsYUFBYTs7Ozt1QkFDWixXQUFXOzs7O0FBRXBCLFNBQVMsU0FBUyxDQUFHLFdBQVcsRUFBRSxJQUFJLEVBQW9CO0tBQWxCLE9BQU8seURBQUcsS0FBSzs7QUFDckUsS0FBSSxLQUFLLEdBQUcsNkJBQVksSUFBSSxDQUFFLENBQUM7O0FBRS9CLE1BQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUN4QixHQUFHLENBQUMsVUFBQyxJQUFJO1NBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxDQUFDO0VBQUEsQ0FBQyxDQUMzRixHQUFHLENBQUMsVUFBQyxJQUFJO1NBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxhQUFhLEVBQUUsbUJBQVEsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0VBQUEsQ0FBQyxDQUFDOztBQUVsRixLQUFLLE9BQU8sSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFHO0FBQzNDLE1BQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLENBQzFFLE1BQU0sQ0FBRSxVQUFFLEdBQUc7VUFBTSxPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsS0FBSyxRQUFRO0dBQUEsQ0FBRSxDQUFDOztBQUUxRixNQUFJLFdBQVcsR0FBRyxlQUFlLENBQy9CLEdBQUcsQ0FBRSxTQUFTLGtCQUFrQixDQUFHLGNBQWMsRUFBRztBQUNwRCxPQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUUsY0FBYyxDQUFFLENBQUM7O0FBRTNFLE9BQUk7QUFDSCxRQUFJLFVBQVUsR0FBRyxPQUFPLENBQUUsVUFBVSxDQUFFLENBQUM7QUFDdkMsY0FBVSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7QUFDakMsY0FBVSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELGVBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFFLHFCQUFxQiw4QkFBMkIsY0FBYyx5QkFBa0IsVUFBVSxRQUFLLENBQUM7SUFDdkgsQ0FBQyxPQUFPLEdBQUcsRUFBRTtBQUNiLGVBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLHFCQUFxQix1Q0FBb0MsY0FBYyx5QkFBa0IsVUFBVSxRQUFLLENBQUM7SUFDL0g7R0FDRCxDQUFDLENBQUM7O0FBRUosT0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7RUFDbEM7O0FBRUQsTUFBSyxHQUFHLEtBQUssQ0FDWCxNQUFNLENBQUMsVUFBQyxJQUFJO1NBQUssSUFBSTtFQUFBLENBQUMsQ0FDdEIsR0FBRyxDQUFDLFNBQVMsWUFBWSxDQUFFLElBQUksRUFBRTtBQUNqQyxTQUFPLDBCQUFZLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQzs7QUFFSixRQUFPLEtBQUssQ0FBQztDQUNiIiwiZmlsZSI6ImxvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCdcblxuaW1wb3J0IHJlcXVpcmVBbGwgZnJvbSAncmVxdWlyZS1hbGwnO1xuaW1wb3J0IGhvb2tGYWN0b3J5IGZyb20gJy4vZGVmYXVsdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRIb29rcyAoIGFwcGxpY2F0aW9uLCBwYXRoLCBtb2R1bGVzID0gZmFsc2UgKSB7XG5cdGxldCBob29rcyA9IHJlcXVpcmVBbGwoIHBhdGggKTtcblxuXHRob29rcyA9IE9iamVjdC5rZXlzKGhvb2tzKVxuXHRcdC5tYXAoKG5hbWUpID0+IE9iamVjdC5hc3NpZ24oaG9va3NbbmFtZV0uaW5kZXggPyBob29rc1tuYW1lXS5pbmRleCA6IGhvb2tzW25hbWVdLCB7IG5hbWUgfSkpXG5cdFx0Lm1hcCgoaG9vaykgPT4gT2JqZWN0LmFzc2lnbihob29rLCB7ICdyZXF1aXJlUGF0aCc6IHJlc29sdmUocGF0aCwgaG9vay5uYW1lKSB9KSk7XG5cblx0aWYgKCBtb2R1bGVzICYmIGFwcGxpY2F0aW9uLmNvbmZpZ3VyYXRpb24gKSB7XG5cdFx0bGV0IG1vZHVsZUhvb2tOYW1lcyA9IE9iamVjdC5rZXlzKCBhcHBsaWNhdGlvbi5jb25maWd1cmF0aW9uLmhvb2tzLmVuYWJsZWQgKVxuXHRcdFx0LmZpbHRlciggKCBrZXkgKSA9PiB0eXBlb2YgYXBwbGljYXRpb24uY29uZmlndXJhdGlvbi5ob29rcy5lbmFibGVkWyBrZXkgXSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGxldCBtb2R1bGVIb29rcyA9IG1vZHVsZUhvb2tOYW1lc1xuXHRcdFx0Lm1hcCggZnVuY3Rpb24gcmVxdWlyZUhvb2tNb2R1bGVzICggbW9kdWxlSG9va05hbWUgKSB7XG5cdFx0XHRcdGxldCBtb2R1bGVOYW1lID0gYXBwbGljYXRpb24uY29uZmlndXJhdGlvbi5ob29rcy5lbmFibGVkWyBtb2R1bGVIb29rTmFtZSBdO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0bGV0IG1vZHVsZUhvb2sgPSByZXF1aXJlKCBtb2R1bGVOYW1lICk7XG5cdFx0XHRcdFx0bW9kdWxlSG9vay5uYW1lID0gbW9kdWxlSG9va05hbWU7XG5cdFx0XHRcdFx0bW9kdWxlSG9vay5yZXF1aXJlUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lKTtcblx0XHRcdFx0XHRhcHBsaWNhdGlvbi5sb2cuZGVidWcoICdbYXBwbGljYXRpb246aG9va3NdJywgYFJlcXVpcmVkIG1vZHVsZSBob29rICcke21vZHVsZUhvb2tOYW1lfScgZnJvbSBtb2R1bGUgJyR7bW9kdWxlTmFtZX0nYCApO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRhcHBsaWNhdGlvbi5sb2cud2FybiggJ1thcHBsaWNhdGlvbjpob29rc10nLCBgQ291bGQgbm90IHJlcXVpcmUgbW9kdWxlIGhvb2sgJyR7bW9kdWxlSG9va05hbWV9JyBmcm9tIG1vZHVsZSAnJHttb2R1bGVOYW1lfSdgICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0aG9va3MgPSBob29rcy5jb25jYXQobW9kdWxlSG9va3MpO1xuXHR9XG5cblx0aG9va3MgPSBob29rc1xuXHRcdC5maWx0ZXIoKGhvb2spID0+IGhvb2spXG5cdFx0Lm1hcChmdW5jdGlvbiBob29rQ2FsbGJhY2sgKGhvb2spIHtcblx0XHRcdHJldHVybiBob29rRmFjdG9yeShhcHBsaWNhdGlvbiwgaG9vay5uYW1lLCBob29rKTtcblx0XHR9KTtcblxuXHRyZXR1cm4gaG9va3M7XG59XG4iXX0=